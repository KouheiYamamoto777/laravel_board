version: 2.1
executors:
    my-executor:
      docker:
        - image: circleci/php:7.3-node-browsers
jobs:
  build:
    docker:
      - image: circleci/php:7.3-node-browsers
      - image: circleci/mysql:8.0.4
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: ${DB_NAME}
          MYSQL_USER: ${DB_USER}
          MYSQL_PASSWORD: ${DB_PASS}
    environment:
        APP_ENV: testing
        DB_CONNECTION: mysql
        DB_HOST: db
        DB_PORT: 3306
        DB_DATABASE: ${DB_NAME}
        DB_USERNAME: ${DB_USER}
        DB_PASSWORD: ${DB_PASS}
    steps:
      - checkout
      - restore_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
      - run: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
          - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            fi
      - save_cache:
            paths:
                - $HOME/.npm
            key: npm-v1-{{ checksum "package-lock.json" }}
      - run: npm run dev
      - run:
          name: get ready for mysql
          command: |
            sudo apt-get update
            sudo apt-get install libpq-dev
            sudo docker-php-ext-install pdo_pgsql
            dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: php test
          command: vendor/bin/phpunit

  deploy:
    docker:
      - image: circleci/php:7.3-node-browsers
    environment:
      AWS_DEFAULT_REGION: ap-northeast-1
    steps:
      - checkout
      - restore_cache:
          key: composer-no-dev-v1-{{ checksum "composer.lock" }}
      - run: composer install -n --no-dev --prefer-dist
      - save_cache:
          key: composer-no-dev-v1-{{ checksum "composer.lock" }}
          paths:
            - vender
      - restore_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run: npm run prod
      - run:
          name: archive artifacts
          command: zip -ryq laravel_board.zip .
      - aws-cli/install
      - run:
          name: upload artifacts to s3
          command: aws s3 cp laravel_board.zip s3://${AWS_S3_BUCKET_NAME}
      - run:
          name: deploy to prod
          command: |
            aws deploy create-deployment \
            --application-name laravel-bbs \
            --deployment-group-name laravel-bbs \
            --s3-location bucket=${AWS_S3_BUCKET_NAME},key=laravel_board.zip,bundleType=zip
  deploy_tmp:
    executor: my-executor
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: deploy to prod
          command: |
            echo -e "Host git-codecommit.*.amazonaws.com\n User ${AWS_SSH_KEY_ID}\n StrictHostKeyChecking no" > ${HOME}/.ssh/config
            git push ssh://git-codecommit.us-east-2.amazonaws.com/v1/repos/laravel_board
orbs:
  aws-cli: circleci/aws-cli@1.0.0

workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy_tmp:
          requires:
            - build
          filters:
            branchs:
              only:
                - master
