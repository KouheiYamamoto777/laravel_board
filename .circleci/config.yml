version: 2.1
jobs:
  build:
    docker:
      - image: circleci/php:7.3-node-browsers
      - image: circleci/mysql:8.0.4
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: ${DB_NAME}
          MYSQL_USER: ${DB_USER}
          MYSQL_PASSWORD: ${DB_PASS}
    environment:
        APP_ENV: testing
        DB_CONNECTION: mysql
        DB_HOST: db
        DB_PORT: 3306
        DB_DATABASE: ${DB_NAME}
        DB_USERNAME: ${DB_USER}
        DB_PASSWORD: ${DB_PASS}
    steps:
      - checkout
      - restore_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
      - run: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
          - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            fi
      - save_cache:
            paths:
                - $HOME/.npm
            key: npm-v1-{{ checksum "package-lock.json" }}
      - run: npm run dev
      - run:
          name: get ready for mysql
          command: |
            sudo apt-get update
            sudo apt-get install libpq-dev
            sudo docker-php-ext-install pdo_pgsql
            dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: php test
          command: vendor/bin/phpunit

  deploy:
    docker:
      - image: circleci/php:7.3-node-browsers
    steps:
      - add_ssh_keys
      - run:
          name: deploy
          command: |
            ssh -o StrictHostKeyChecking=no -t ec2-user@${HOST_NAME} "sudo su - webapp && \
            cd laravel_board && \
            git pull origin master && \
            composer install -n --no-dev --prefer-dist && \
            npm ci && \
            npm run prod && \
            php artisan migrate --force && \
            php artisan config:cache"
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
